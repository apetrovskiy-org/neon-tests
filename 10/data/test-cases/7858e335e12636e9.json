{
  "uid" : "7858e335e12636e9",
  "name" : "test_erc20_contract",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_erc20_contract",
  "historyId" : "89a6f2a567fa709a6cffcab2f442e17a",
  "time" : {
    "start" : 1643802865480,
    "stop" : 1643802870236,
    "duration" : 4756
  },
  "description" : "Verify ERC20 token send",
  "descriptionHtml" : "<p>Verify ERC20 token send</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Operator receive 0.000241346 NEON (0.00 $) and spend 0.054142240 SOL (5.41 $)\nassert Decimal('0.0000603365000') > Decimal('5.41422400')",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f306f9ca520>\n\n    def test_erc20_contract(self):\n        \"\"\"Verify ERC20 token send\"\"\"\n        #TODO: Add asserts to check cost for deploy big contract\n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n        solcx.install_solc(\"0.6.6\")\n        contract_path = (pathlib.Path(__file__).parent / \"contracts\" / \"ERC20.sol\").absolute()  # Deploy 331 steps\n        compiled = solcx.compile_files([contract_path], output_values=[\"abi\", \"bin\"], solc_version=\"0.6.6\")\n        contract_interface = self.get_compiled_contract(\"ERC20\", compiled)\n    \n        acc2 = self.web3_client.create_account()\n    \n        contract_tx = self.web3_client.deploy_contract(\n            self.acc,\n            abi=contract_interface[\"abi\"],\n            bytecode=contract_interface[\"bin\"],\n            gas=10000000,\n            constructor_args=[1000],\n        )\n    \n        contract = self.web3_client.eth.contract(address=contract_tx[\"contractAddress\"], abi=contract_interface[\"abi\"])\n    \n        sol_balance_before_request = self.operator.get_solana_balance()\n    \n        assert contract.functions.balanceOf(self.acc.address).call() == 1000\n    \n        sol_balance_after_request = self.operator.get_solana_balance()\n        assert sol_balance_before_request == sol_balance_after_request\n    \n        transfer_tx = self.web3_client.send_erc20(\n            self.acc, acc2, 500, contract_tx[\"contractAddress\"], abi=contract_interface[\"abi\"]\n        )\n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n        assert sol_balance_before > sol_balance_after_request > sol_balance_after\n        assert neon_balance_after > neon_balance_before\n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f306f9ca520>\nsol_diff = 54142240, neon_diff = 241346\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff / LAMPORT_PER_SOL\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(SOL_PRICE, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $)\".format(neon_amount, neon_cost, sol_amount, sol_cost)\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.000241346 NEON (0.00 $) and spend 0.054142240 SOL (5.41 $)\nE           assert Decimal('0.0000603365000') > Decimal('5.41422400')\n\nintegration/tests/economy/test_economics.py:54: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1643802855469,
      "stop" : 1643802855469,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1643802855469,
      "stop" : 1643802855471,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1643802855471,
      "stop" : 1643802856415,
      "duration" : 944
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1643802856415,
      "stop" : 1643802856416,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1643802856416,
      "stop" : 1643802856417,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1643802856417,
      "stop" : 1643802856417,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1643802856418,
      "stop" : 1643802859532,
      "duration" : 3114
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator initial balance: 926157158.2474203 NEON 6996681.387654706 SOL",
      "time" : {
        "start" : 1643802858429,
        "stop" : 1643802858429,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1643802858429,
        "stop" : 1643802858441,
        "duration" : 12
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 100 NEON from faucet for 0x4D2C3888626D16E8B011297aA28F497Ff4a795f7",
      "time" : {
        "start" : 1643802858441,
        "stop" : 1643802859532,
        "duration" : 1091
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1643802865480,
      "stop" : 1643802865480,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1643802865480,
      "stop" : 1643802865480,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Verify ERC20 token send",
    "status" : "failed",
    "statusMessage" : "AssertionError: Operator receive 0.000241346 NEON (0.00 $) and spend 0.054142240 SOL (5.41 $)\nassert Decimal('0.0000603365000') > Decimal('5.41422400')",
    "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f306f9ca520>\n\n    def test_erc20_contract(self):\n        \"\"\"Verify ERC20 token send\"\"\"\n        #TODO: Add asserts to check cost for deploy big contract\n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n        solcx.install_solc(\"0.6.6\")\n        contract_path = (pathlib.Path(__file__).parent / \"contracts\" / \"ERC20.sol\").absolute()  # Deploy 331 steps\n        compiled = solcx.compile_files([contract_path], output_values=[\"abi\", \"bin\"], solc_version=\"0.6.6\")\n        contract_interface = self.get_compiled_contract(\"ERC20\", compiled)\n    \n        acc2 = self.web3_client.create_account()\n    \n        contract_tx = self.web3_client.deploy_contract(\n            self.acc,\n            abi=contract_interface[\"abi\"],\n            bytecode=contract_interface[\"bin\"],\n            gas=10000000,\n            constructor_args=[1000],\n        )\n    \n        contract = self.web3_client.eth.contract(address=contract_tx[\"contractAddress\"], abi=contract_interface[\"abi\"])\n    \n        sol_balance_before_request = self.operator.get_solana_balance()\n    \n        assert contract.functions.balanceOf(self.acc.address).call() == 1000\n    \n        sol_balance_after_request = self.operator.get_solana_balance()\n        assert sol_balance_before_request == sol_balance_after_request\n    \n        transfer_tx = self.web3_client.send_erc20(\n            self.acc, acc2, 500, contract_tx[\"contractAddress\"], abi=contract_interface[\"abi\"]\n        )\n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n        assert sol_balance_before > sol_balance_after_request > sol_balance_after\n        assert neon_balance_after > neon_balance_before\n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f306f9ca520>\nsol_diff = 54142240, neon_diff = 241346\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff / LAMPORT_PER_SOL\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(SOL_PRICE, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $)\".format(neon_amount, neon_cost, sol_amount, sol_cost)\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.000241346 NEON (0.00 $) and spend 0.054142240 SOL (5.41 $)\nE           assert Decimal('0.0000603365000') > Decimal('5.41422400')\n\nintegration/tests/economy/test_economics.py:54: AssertionError",
    "steps" : [ {
      "name" : "Verify operator profit",
      "time" : {
        "start" : 1643802870235,
        "stop" : 1643802870236,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Operator receive 0.000241346 NEON (0.00 $) and spend 0.054142240 SOL (5.41 $)\nassert Decimal('0.0000603365000') > Decimal('5.41422400')\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 54, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
      "steps" : [ {
        "name" : "Operator receive 0.000241346 NEON (0.00 $) and spend 0.054142240 SOL (5.41 $)",
        "time" : {
          "start" : 1643802870235,
          "stop" : 1643802870235,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Operator receive 0.000241346 NEON (0.00 $) and spend 0.054142240 SOL (5.41 $)\nassert Decimal('0.0000603365000') > Decimal('5.41422400')\n",
        "statusTrace" : "  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 54, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "sol_diff",
        "value" : "54142240"
      }, {
        "name" : "neon_diff",
        "value" : "241346"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1643802881129,
      "stop" : 1643802881710,
      "duration" : 581
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 926157058.2478895 NEON 6996681.239940346 SOL",
      "time" : {
        "start" : 1643802881710,
        "stop" : 1643802881710,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1643802881713,
      "stop" : 1643802881713,
      "duration" : 0
    },
    "status" : "broken",
    "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'allure-report/environment.properties'\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 200, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/_pytest/fixtures.py\", line 941, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/conftest.py\", line 75, in allure_environment\n    with open(pathlib.Path() / \"allure-report\" / \"environment.properties\", \"w+\") as f:\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az123-129"
  }, {
    "name" : "thread",
    "value" : "1716-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7858e335e12636e9.json",
  "parameterValues" : [ ]
}